#!/usr/bin/perl

use warnings;
use strict;
# use Data::Dumper;

sub IsLeapYear {
    my $year= $_[0];
    if ($year%4 !=0) {
        return 0;
    } elsif ($year%100 != 0) {
        return 1;
    } elsif (($year+1900)%400 == 0) {
        return 1;
    } else {
        return 0;
    }
}

sub MonLen {
    my $year= $_[0];
    my $mon=  $_[1];
    my @ml = ([31,28,31,30,31,30,31,31,30,31,30,31],
              [31,29,31,30,31,30,31,31,30,31,30,31]);

    return $ml[IsLeapYear($year)][$mon];
}

sub DaysInYearBeforeMonth {
    my $year= $_[0];
    my $mon=  $_[1];
    my @ml = ([0,31,59,90,120,151,181,212,243,273,304,334,365],
              [0,31,60,91,121,152,182,213,244,274,305,335,366]);

    return $ml[IsLeapYear($year)][$mon];
}

# days before this year
sub DaysBeforeYear {
    my $year= $_[0];

    my $y = $year + 1900 - 1601; # should be non-negative
    return $y*365
           + int ($y/4) 
           - int ($y/100)
           + int ($y/400);
}

# days before this date
sub DaysBeforeDate {
    my $year= $_[0];
    my $mon=  $_[1];
    my $mday= $_[2];

#   printf "DaysBeforeDate(%d,%d,%d) debug %d,%d\n",
#       $year, $mon, $mday, $y, $y*365;
    return   DaysBeforeYear ($year)
           + DaysInYearBeforeMonth ($year, $mon)
           + ($mday-1);
}

sub YdayToMD {
    my $year= $_[0];
    my $yday= $_[1];

    my $mon= int ($yday / 31);
#    printf STDERR "InternalToYMD year=%d yday=%d mon=%d\n",$year,$yday,$mon;
    my $test1= DaysInYearBeforeMonth ($year, $mon);
    my $test2= DaysInYearBeforeMonth ($year, $mon+1);
#    printf STDERR "InternalToYMD yday=%s mon=%s test1=%s test2=%s\n",$yday,$mon,$test1,$test2;
#    print STDERR Dumper ($yday);
#    print STDERR Dumper ($test1);
    while ($yday < $test1) {
        --$mon;
#   #    printf STDERR "InternalToYMD yday=%d mon=%d test1=%d test2=%d\n",$yday,$mon,$test1,$test2;
        $test1= DaysInYearBeforeMonth ($year, $mon);
        $test2= DaysInYearBeforeMonth ($year, $mon+1);
    }
    while ($yday >= $test2) {
        ++$mon;
        $test1= DaysInYearBeforeMonth ($year, $mon);
        $test2= DaysInYearBeforeMonth ($year, $mon+1);
    }
    my $mday= $yday - $test1 + 1;
    return ($mon, $mday);
}

sub InternalToYday {
    my $int= $_[0];
    my $year= int ($int/365) + 1601 - 1900;

#    printf STDERR "InternalToYMD-61 from=%s\n", $int;

    my $test1= DaysBeforeDate ($year,  0,  1);
    my $test2= DaysBeforeDate ($year, 11, 31);
    while ($int < $test1) {
        --$year;
        $test1= DaysBeforeDate ($year,  0,  1);
        $test2= DaysBeforeDate ($year, 11, 31);
    }
    while ($int > $test2) {
        ++$year;
        $test1= DaysBeforeDate ($year,  0,  1);
        $test2= DaysBeforeDate ($year, 11, 31);
    }
    my $yday= $int - $test1;
    return ($year, $yday);
}

sub InternalToYMD {
    my $int= $_[0];

    my ($year, $yday) = InternalToYday ($int);
    my ($mon, $mday) = YdayToMD ($year, $yday);

    return ($year, $mon, $mday);
}

sub DoSet {
    my $par= $_[0];
#   printf "set\"%s\"\n", $par;
    if (length ($par) != 8 || $par !~ /^\d+$/) {
        exit 2;
    }
    my $year= substr ($par, 0, 4) - 1900;
    my $mon=  substr ($par, 4, 2) - 1;
    my $mday= substr ($par, 6, 2) - 0;

    if (($year<-300 || $year>500) ||
        ($mon < 0   || $mon >11) ||
        ($mday< 1   || $mday>MonLen($year,$mon))) {
        printf STDERR "DoSet Invalid params %04d-%02d-%02d\n", 1900+$year, 1+$mon, $mday;
        exit 3;
    }

    my $int= DaysBeforeDate ($year, $mon, $mday);
#   $wday= ($int+1)%7; # 0=Sunday
#   printf STDERR "DoSet %04d-%02d-%02d => %s\n", 1900+$year, 1+$mon, $mday, $int;
    return $int;
}

sub DoSetInt {
    my $s_int= $_[0];
    my $int=  int ($s_int);
    if ($s_int !~ /^[+-]?\d+$/ ||
        $int<0 || $int>=2922194) {
        printf STDERR "DoSetInt: Invalid param %s\n", $s_int;
        exit 2;
    }
    return $int;
}

sub DoAddDays {
    my $int=    $_[0];
    my $factor= $_[1];
    my $add=    $_[2];
    if ($add !~ /^[+-]?\d+$/) {
        printf STDERR "DoAddDays: bad param %s\n", $add;
        exit 2;
    }

#   printf STDERR "DoAddDays: %d->%d\n",$int,$int+$add;
    $int += $factor*$add;

    if ($int < 0 || $int >= 2922194) {
        printf STDERR "DoAddDays: overflow\n", $add;
        exit 2;
    }

    return $int;
}

sub DoAddMonths {
    my $int=    $_[0];
    my $factor= $_[1];
    my $s_add=  $_[2];
    my $add=    int ($s_add);
    my $add_months= $add*$factor;
    if ($s_add !~ /^[+-]?\d+$/ ||
        $add_months < -9600 || $add_months > 9600) {
        printf STDERR "DoAddMonths: bad param %s\n", $s_add;
        exit 2;
    }

    my ($year,$mon,$mday) = InternalToYMD ($int);
    my $tmp= $mon + $add_months;

    if ($tmp >= 0) {
        $mon = $tmp;
        if ($mon >= 12) {
            $year += int ($tmp/12);
            $mon  = $mon%12;
        }

    } else {
        $tmp= -$tmp;
        $mon= (12-($tmp%12))%12;
        $year -= int (($tmp+11)/12);
    }

#   printf STDERR "Debug AddMonths year=%s mon=%s mday=%s\n", $year, $mon, $mday;
    if ($mday > MonLen ($year, $mon)) {
        $mday= MonLen ($year, $mon);
    }

    $int= DaysBeforeDate ($year, $mon, $mday);
    return $int;
}

sub DoNextDow {
    my $int=   $_[0];
    my $todow= $_[1];
    my $dir=   $_[2];

    if ($todow !~ /^\d$/ ||
        ! ($todow>=0 && $todow<=7)) {
        printf STDERR "DoNextDow: bad param %s\n", $todow;
        exit 2;
    }
    if ($todow==7) { $todow= 0; } # both 0 and 7 mean Sunday
    do {
        $int += $dir;
    } while (($int+1)%7 != $todow);
    return $int;
}

sub DoSetMday {
    my $int=    $_[0];
    my $s_tomday= $_[1];
    my $tomday= int ($s_tomday);
    if ($s_tomday !~ /^[+-]?\d+$/ ||
        $tomday < -31 || $tomday > 31) {
        printf STDERR "DoSetMday: bad param %s\n", $s_tomday;
        exit 2;
    }

    my ($year,$mon,$mday)= InternalToYMD ($int);

    if ($tomday==0) {
        $mday= 1;
    } elsif ($tomday>0) {
        $mday= $tomday;
        if ($mday > MonLen ($year,$mon)) {
            $mday = MonLen ($year,$mon);
        }
    } else {
        $mday= MonLen ($year,$mon) + 1 + $tomday;
        if ($mday<1) {
            $mday= 1;
        }
    }

    return DaysBeforeDate ($year, $mon, $mday);
}

sub DoSetYday {
    my $int=      $_[0];
    my $s_toyday= $_[1];
    my $toyday= int ($s_toyday);         # 1..365(366) or -1..-365(-356)
    if ($s_toyday !~ /^[+-]?\d+$/ ||
        $toyday < -366 || $toyday > 366) {
        printf STDERR "DoSetYday: bad param %s\n", $s_toyday;
        exit 2;
    }

    my ($year,$oldyday)= InternalToYday ($int);
    my $yearlen= 365 + IsLeapYear ($year);
    my $newyday= 0; # 0..364(365)

    if ($toyday==0) { # treat as 1
        $newyday= 0;
    } elsif ($toyday > 0) {
        $newyday= $toyday - 1;
        if ($newyday >= $yearlen) {
            $newyday = $yearlen-1;
        }
    } else {
        $newyday= $yearlen + $toyday;
        if ($newyday<0) {
            $newyday= 0;
        }
    }
#   printf STDERR "Debug toyday=%s oldyday=%s newyday=%s\n",$toyday,$oldyday,$newyday;
    $int += ($newyday - $oldyday);

    return $int;
}

sub DoPrint {
    my $int = $_[0];
    my $str = $_[1];

    my ($year, $yday) = InternalToYday ($int);
    my ($mon, $mday)  = YdayToMD ($year, $yday);

    my $sI= sprintf ("%06d", $int);
    my $sy= sprintf ("%02d", ($year+1900)%100);
    my $sY= sprintf ("%04d", ($year+1900));
    my $sm= sprintf ("%02d", $mon+1);
    my $sd= sprintf ("%02d", $mday);
    my $sw= sprintf ("%d", ($int+1)%7);
    my $sj= sprintf ("%03d", $yday+1);

    $str =~ s/%I/$sI/g;
    $str =~ s/%Y/$sY/g;
    $str =~ s/%y/$sy/g;
    $str =~ s/%m/$sm/g;
    $str =~ s/%d/$sd/g;
    $str =~ s/%w/$sw/g;
    $str =~ s/%j/$sj/g;
    $str =~ s/%%/%/g;

    printf "%s",$str
}

sub main {
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
        localtime (time);
# from now on, we only use $mday,$mon,$year,$wday,$yday
    my $int= DaysBeforeDate ($year, $mon, $mday);
# $int: internal form: days since 1601.01.01:
# eg 
# 1601-01-01 =>      0, 1601-01-01 =>    365
# 1700-02-27 =>  36216, 1700-02-28 =>  36217, 1700-03-01 =>  36218
# 2000-02-28 => 145789, 2000-02-29 => 145790, 2000-03-01 => 145791
# 2001-02-28 => 146155, 2001-03-01 => 146156
#
# day of week ($int+1)%7 => 0..6 = Sun..Sat

    my $fprint= 0; # Was the last command a print? 0/1 = no/yes
    my $ARGC= scalar (@ARGV);
    my $i;
    for ($i=0; $i<$ARGC; ++$i) {
        $fprint= 0;

        if ($ARGV[$i] eq 'today') {
            $int= DaysBeforeDate ($year, $mon, $mday);

        } elsif ($ARGV[$i] eq 'tomorrow') {
            $int= DaysBeforeDate ($year, $mon, $mday) +1;

        } elsif ($ARGV[$i] eq 'yesterday') {
            $int= DaysBeforeDate ($year, $mon, $mday) -1;

        } elsif ($ARGV[$i] eq 'set') {
            if ($i>=$ARGC-1) { next; }
            $int= DoSet ($ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'set-int') {
            if ($i>=$ARGC-1) { next; }
            $int= DoSetInt ($ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'add-days' ||
                 $ARGV[$i] eq 'add-day') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddDays ($int, 1, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'sub-days' ||
                 $ARGV[$i] eq 'sub-day') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddDays ($int, -1, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'add-months' ||
                 $ARGV[$i] eq 'add-month') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddMonths ($int, 1, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'sub-months' ||
                 $ARGV[$i] eq 'sub-month') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddMonths ($int, -1, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'add-years' ||
                 $ARGV[$i] eq 'add-year') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddMonths ($int, 12, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'sub-years' ||
                 $ARGV[$i] eq 'sub-year') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddMonths ($int, -12, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'sub-months' ||
                 $ARGV[$i] eq 'sub-month') {
            if ($i>=$ARGC-1) { next; }
            $int= DoAddMonths ($int, -1, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'next-dow' ||
                 $ARGV[$i] eq 'next-wday') {
            if ($i>=$ARGC-1) { next; }
            $int= DoNextDow ($int, $ARGV[++$i], 1);

        } elsif ($ARGV[$i] eq 'prev-dow' ||
                 $ARGV[$i] eq 'prev-wday') {
            if ($i>=$ARGC-1) { next; }
            $int= DoNextDow ($int, $ARGV[++$i], -1);

        } elsif ($ARGV[$i] eq 'upto-dow' ||
                 $ARGV[$i] eq 'upto-wday') {
            if ($i>=$ARGC-1) { next; }
            $int= DoNextDow ($int-1, $ARGV[++$i], 1);

        } elsif ($ARGV[$i] eq 'downto-dow' ||
                 $ARGV[$i] eq 'downto-wday') {
            if ($i>=$ARGC-1) { next; }
            $int= DoNextDow ($int+1, $ARGV[++$i], -1);

        } elsif ($ARGV[$i] eq 'set-mday') {
            if ($i>=$ARGC-1) { next; }
            $int= DoSetMday ($int, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'set-yday') {
            if ($i>=$ARGC-1) { next; }
            $int= DoSetYday ($int, $ARGV[++$i]);

        } elsif ($ARGV[$i] eq 'print') {
            DoPrint ($int, '%Y%m%d');
            $fprint= 1

        } elsif ($ARGV[$i] eq 'printf') {
            if ($i>=$ARGC-1) { next; }
            DoPrint ($int, $ARGV[++$i]);
            $fprint= 1
        } else {
            printf STDERR "pldate: *** unknow command '%s'\n", $ARGV[$i];
            exit 2
        }
    }

    if ($fprint) {
        print "\n";
    } else {
        ($year,$mon,$mday)= InternalToYMD ($int);
        printf "%04d%02d%02d\n", 1900+$year, 1+$mon, $mday;
    }
}

main ();
